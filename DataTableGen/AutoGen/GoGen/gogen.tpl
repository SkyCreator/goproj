// Code generated by DataTableGen. DO NOT EDIT.

package GoData

import (
	{{- if .NeedStrconv }}"strconv"{{end}}
	"strings"
)

type DT{{.TableName}} struct {
    {{range .DataVar}}
    {{.VarName}}   {{.VarType}} 
    {{end}}
}

func NewDT{{.TableName}}() *DT{{.TableName}} {
	return &DT{{.TableName}}{}
}

func (dt *DT{{.TableName}}) ParseData(data []string) {
	length := len(data)
	var idx int = 0
    {{range .DataVar}}
	if length > idx {
        {{- if eq .VarType "INT"}}
		dt.{{.VarName}}, _ = strconv.Atoi(data[idx])
        {{- else if eq .VarType "STRING"}}
        dt.{{.VarName}} = data[idx]
        {{- end}}
		idx++
	}
     {{- end}}
}

type DT{{.TableName}}Table struct {
	drs []*DT{{.TableName}}
}

func (dt *DT{{.TableName}}Table) Rows() int {
	return len(dt.drs)
}

func (dt *DT{{.TableName}}Table) Get(id int) *DT{{.TableName}} {
	for i := 0; i < len(dt.drs); i++ {
		if dt.drs[i] != nil && dt.drs[i].Id == id {
			return dt.drs[i]
		}
	}
	return nil
}
func (dt *DT{{.TableName}}Table) GetAll() []*DT{{.TableName}} {
	return dt.drs
}

func (dt *DT{{.TableName}}Table) parseData(data [][]string) error {
	l := len(data)
	var index = 0
	for i := 3; i < l; i++ {
		row := data[i][0]
		if strings.IndexByte(row, '#') == 0 {
			continue
		}
		drs := NewDT{{.TableName}}()
		drs.ParseData(data[i])
		dt.drs = append(dt.drs, drs)
		index++
	}
	return nil
}
func (dtm *DataTableManager) GetDT{{.TableName}}Table() *DT{{.TableName}}Table {
	if dt, ok := dtm.DataTableMap["DT{{.TableName}}"]; ok {
		return dt.(*DT{{.TableName}}Table)
	}
	dt := &DT{{.TableName}}Table{}
	dtm.DataTableMap["DT{{.TableName}}"] = dt
	return dt
}
