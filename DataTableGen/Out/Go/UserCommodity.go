// Code generated by DataTableGen. DO NOT EDIT.

package GoData

import "strconv"

type DTUserCommodity struct {
    Id int
    Code string
    Name string
    Type int
    Price int
    Icon string
}

func (dtm *DataTableManager) GetDTUserCommodityTable() *DTUserCommodityTable {
	if dt, ok := dtm.DataTableMap["DTUserCommodity"]; ok {
		return dt.(*DTUserCommodityTable)
	}
	dt := &DTUserCommodityTable{}
	dtm.DataTableMap["DTUserCommodity"] = dt
	return dt
}

func (dt *DTUserCommodityTable) Rows() int {
	return len(dt.drs)
}

func (dt *DTUserCommodityTable) Get(index int) *DTUserCommodity {
	if index < 0 || index >= len(dt.drs) {
		return nil
	}
	return dt.drs[index]
}

func (dt *DTUserCommodityTable) GetById(id int) *DTUserCommodity {
	for i := 0; i < len(dt.drs); i++ {
		if dt.drs[i] != nil && dt.drs[i].Id == id {
			return dt.drs[i]
		}
	}
	return nil
}

func (dt *DTUserCommodityTable) GetAll() []*DTUserCommodity {
	return dt.drs
}

func newDTUserCommodity() *DTUserCommodity {
	return &DTUserCommodity{}
}

func (dt *DTUserCommodity) parseData(data []string) {
	dt.Id, _ = strconv.Atoi(data[0])
    dt.Code = data[1]
    dt.Name = data[2]
	dt.Type, _ = strconv.Atoi(data[3])
	dt.Price, _ = strconv.Atoi(data[4])
    dt.Icon = data[5]
}

type DTUserCommodityTable struct {
	drs []*DTUserCommodity
}

func (dt *DTUserCommodityTable) parseData(data [][]string) error {
	l := len(data)
	var index = 0
	for i := 0; i < l; i++ {
		drs := newDTUserCommodity()
		drs.parseData(data[i])
		dt.drs = append(dt.drs, drs)
		index++
	}
	return nil
}
