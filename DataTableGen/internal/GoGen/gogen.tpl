// Code generated by DataTableGen. DO NOT EDIT.

package GoData

import "strconv"

type DT{{.TableName}} struct {
    {{- range .TableColData}}
    {{.ColName}}   {{- if eq .ColType "INT"}} int {{- else if eq .ColType "STRING"}} string {{- else if eq .ColType "BOOL"}} bool{{- else if eq .ColType "FLOAT"}} float64{{- end}}
    {{- end}}
}

func (dtm *DataTableManager) GetDT{{.TableName}}Table() *DT{{.TableName}}Table {
	if dt, ok := dtm.DataTableMap["DT{{.TableName}}"]; ok {
		return dt.(*DT{{.TableName}}Table)
	}
	dt := &DT{{.TableName}}Table{}
	dtm.DataTableMap["DT{{.TableName}}"] = dt
	return dt
}

func (dt *DT{{.TableName}}Table) Rows() int {
	return len(dt.mapData)
}

func (dt *DT{{.TableName}}Table) Get(key int) *DT{{.TableName}} {
	if key < 0 {
		return nil
	}
	return dt.mapData[key]
}

func (dt *DT{{.TableName}}Table) GetAll() map[int]*DT{{.TableName}} {
	return dt.mapData
}

func newDT{{.TableName}}() *DT{{.TableName}} {
	return &DT{{.TableName}}{}
}

func (dt *DT{{.TableName}}) parseData(data []string) {
{{- range $index,$_ := .TableColData}}
    {{- if eq .ColType "INT"}}
	dt.{{.ColName}}, _ = strconv.Atoi(data[{{$index}}])
    {{- else if eq .ColType "STRING"}}
    dt.{{.ColName}} = data[{{$index}}]
	{{- else if eq .ColType "BOOL"}}
    dt.{{.ColName}}, _ = strconv.ParseBool(data[{{$index}}])
	{{- else if eq .ColType "FLOAT"}}
    dt.{{.ColName}}, _ = strconv.ParseFloat(data[{{$index}}], 64)
    {{- end}}
{{- end}}
}

type DT{{.TableName}}Table struct {
	mapData map[int]*DT{{.TableName}}
}

func (dt *DT{{.TableName}}Table) parseData(data [][]string) error {
	l := len(data)
	var index = 0
	for i := 0; i < l; i++ {
		drs := newDT{{.TableName}}()
		drs.parseData(data[i])
		dt.mapData[drs.Id] = drs
		index++
	}
	return nil
}
